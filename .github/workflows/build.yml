name: Build AOM AV1 Lavish

on:
  # Triggers the workflow on push or pull request to the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allows the workflow to be run manually
  workflow_dispatch:

jobs:
  # Build for Linux
  build-linux:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install dependencies
      - name: Install required tools (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            perl \
            yasm \
            doxygen \
            ninja-build \
            python3

      # Step 3: Verify CMake version (Check minimum required version from CMakeLists.txt)
      - name: Check CMake version
        run: cmake --version

      # Step 4: Create build directory
      - name: Create build directory
        run: mkdir -p build

      # Step 5: Configure project with CMake
      - name: Configure project with CMake
        working-directory: build
        run: cmake .. -GNinja -DENABLE_DOCS=0 -DCONFIG_TUNE_BUTTERAUGLI=0 -DCONFIG_TUNE_VMAF=0 -DCONFIG_AV1_DECODER=0 -DENABLE_TESTS=0

      # Step 6: Build the project
      - name: Build the project
        working-directory: build
        run: cmake --build .

      # Step 7: Upload Linux artifacts
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: build/

  # Build for Windows
  build-windows:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install MSYS2 with Clang64
      - name: Install MSYS2 and dependencies
        run: |
          choco install -y msys2
          refreshenv
          # Install required MSYS2 packages for clang64
          C:\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm"
          C:\msys64\usr\bin\bash.exe -lc "pacman -S --needed --noconfirm git perl mingw-w64-clang-x86_64-clang mingw-w64-clang-x86_64-ninja mingw-w64-clang-x86_64-cmake mingw-w64-clang-x86_64-nasm"

      # Step 3: Set up MSYS2 environment and configure CMake for Windows
      - name: Configure project with CMake (Windows)
        shell: bash
        run: |
          export PATH=/c/msys64/mingw64/bin:$PATH
          git clone --depth 10 https://gitlab.com/damian101/aom-psy101.git
          cd aom-psy101
          LDFLAGS=-static cmake --fresh -B aom_build -DBUILD_SHARED_LIBS=0 -DENABLE_DOCS=0 -DCONFIG_TUNE_BUTTERAUGLI=0 -DCONFIG_TUNE_VMAF=0 -DCONFIG_AV1_DECODER=0 -DENABLE_TESTS=0 -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-flto -pipe -march=x86-64-v3" -DCMAKE_C_FLAGS="-flto -pipe -march=x86-64-v3"
      
      # Step 4: Build the project using Ninja (Windows)
      - name: Build the project (Windows)
        shell: bash
        run: ninja -C aom_build

      # Step 5: Upload Windows artifacts
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: aom_build/
